//
// Copyright 2022- IBM Inc. All rights reserved
// SPDX-License-Identifier: Apache-2.0
//

syntax = "proto3";

package geds.rpc;
option go_package = "./;protos";

import "status.proto";


message EmptyParams {
  // Empty
}

message ConnectionInformation {
  string remoteAddress = 1;
  optional StatusResponse error = 2;
}

message ObjectStoreConfig {
  string bucket = 1;
  string endpointUrl = 2;
  string accessKey = 3;
  string secretKey = 4;
}
message AvailableObjectStoreConfigs {repeated ObjectStoreConfig mappings = 1;}

message ObjectID {
  string bucket = 1;
  string key = 2;
}

message ObjectInfo {
  string location = 1;
  uint64 size = 2;
  uint64 sealedOffset = 3;
}

message Object {
  ObjectID id = 1;
  ObjectInfo info = 2;
}

message Bucket {string bucket = 1;}

message BucketListResponse {
  repeated string results = 1;
  optional StatusResponse error = 2;
}

message ObjectListRequest {
  ObjectID prefix = 1;
  optional int32 delimiter = 2;
}

message ObjectListResponse {
  repeated Object results = 1;
  repeated string commonPrefixes = 2;
  optional StatusResponse error = 3;
}

message ObjectResponse {
  Object result = 1;
  optional StatusResponse error = 2;
}

enum SubscriptionType {
  NOTYPE = 0;
  BUCKET = 1;
  OBJECT = 2;
  PREFIX = 3;
}

message SubscriptionEvent {
  SubscriptionType subscriptionType = 1;
  string subscriberID = 2;
  string bucketID = 3;
  string key = 4;
}

message SubscriptionStreamEvent {
  string subscriberID = 1;
}

service MetadataService {
  rpc GetConnectionInformation(EmptyParams) returns (ConnectionInformation);
  rpc RegisterObjectStore(ObjectStoreConfig) returns (StatusResponse);
  rpc ListObjectStores(EmptyParams) returns (AvailableObjectStoreConfigs);
  rpc CreateBucket(Bucket) returns (StatusResponse);
  rpc DeleteBucket(Bucket) returns (StatusResponse);
  rpc ListBuckets(EmptyParams) returns (BucketListResponse);
  rpc LookupBucket(Bucket) returns (StatusResponse);
  rpc Create(Object) returns (StatusResponse);
  rpc Update(Object) returns (StatusResponse);
  rpc Delete(ObjectID) returns (StatusResponse);
  rpc DeletePrefix(ObjectID) returns (StatusResponse);
  rpc Lookup(ObjectID) returns (ObjectResponse);
  rpc List(ObjectListRequest) returns (ObjectListResponse);

  rpc CreateOrUpdateObjectStream(stream Object) returns (StatusResponse);
  rpc Subscribe(SubscriptionEvent) returns (StatusResponse);
  rpc SubscribeStream(SubscriptionStreamEvent) returns (stream Object);
  rpc Unsubscribe(SubscriptionEvent) returns (StatusResponse);
}

enum FileTransferProtocol {
  Socket = 0;
  RDMA = 1;
}

message TransportEndpoint {
  FileTransferProtocol type = 1;
  string address = 2;
  uint32 port = 3; // No uint16_t available
}

message AvailTransportEndpoints {repeated TransportEndpoint endpoint = 1;}

service GEDSService {rpc GetAvailEndpoints(EmptyParams) returns (AvailTransportEndpoints);}
